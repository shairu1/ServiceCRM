@model ServiceCRM.Models.EditOrderViewModel
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer
@inject ServiceCRM.Services.LocalizationOrderStatusHelper LocalizationOrderStatusHelper
@using ServiceCRM.Models

@{
    ViewData["Title"] = @Localizer["Title"];
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const dropdownItems = document.querySelectorAll('#statusDropdown + .dropdown-menu .dropdown-item');
            const hiddenInput = document.getElementById('SelectedStatus');
            const button = document.getElementById('statusDropdown');

            // Выделяем текущий статус
            dropdownItems.forEach(i => {
                i.classList.toggle('active', i.dataset.value === hiddenInput.value);
            });

            // Обработка клика
            dropdownItems.forEach(item => {
                item.addEventListener('click', function () {
                    const value = this.dataset.value;
                    const translatedText = this.dataset.translated;
                    hiddenInput.value = value;
                    button.innerText = translatedText;

                    dropdownItems.forEach(i => i.classList.remove('active'));
                    this.classList.add('active');
                });
            });
        });

        document.addEventListener("DOMContentLoaded", function () {
            const amountInput = document.querySelector('input[name="Amount"]');
            if (!amountInput) return;

            function formatAmount(value) {
                // Заменяем запятую на точку
                value = value.replace(',', '.');

                // Ограничиваем максимум 2 знака после точки
                if (value.includes('.')) {
                    const parts = value.split('.');
                    parts[1] = parts[1].slice(0, 2);
                    value = parts.join('.');
                }

                // Оставляем только цифры и одну точку
                value = value.replace(/[^0-9.]/g, '');

                // Если точек больше одной, оставляем только первую
                const firstDot = value.indexOf('.');
                if (firstDot !== -1) {
                    const before = value.slice(0, firstDot + 1);
                    const after = value.slice(firstDot + 1).replace(/\./g, '');
                    value = before + after;
                }

                return value;
            }

            // Преобразуем значение при загрузке страницы
            amountInput.value = formatAmount(amountInput.value);

            // Преобразуем значение при вводе
            amountInput.addEventListener("input", function () {
                amountInput.value = formatAmount(amountInput.value);
            });
        });
    </script>
}

<style>
    :root {
        --bg-color: #f6f8fa;
        --text-color: #1f2328;
        --text-muted: #656d76;
        --border-color: #d0d7de;
        --btn-primary: #3b82f6;
        --btn-primary-hover: #2563eb;
        --btn-success: #16a34a;
        --btn-success-hover: #15803d;
    }

    body.dark-mode {
        --bg-color: #0d1117;
        --text-color: #c9d1d9;
        --text-muted: #8b949e;
        --border-color: #30363d;
        --btn-primary: #3b82f6;
        --btn-primary-hover: #2563eb;
        --btn-success: #16a34a;
        --btn-success-hover: #15803d;
    }

    body {
        background-color: var(--bg-color);
        color: var(--text-color);
        font-family: 'Inter', sans-serif;
        transition: background-color 0.3s, color 0.3s;
    }

    h3 {
        font-weight: 600;
        font-size: 1.5rem;
        color: var(--text-color);
        text-align: center;
        margin-bottom: 2rem;
    }

    .form-control,
    .form-select {
        border-radius: 0.75rem;
        padding: 0.65rem 1rem;
        width: 100%;
        background-color: var(--bg-color);
        border: 1px solid var(--border-color);
        color: var(--text-color);
        transition: background-color 0.3s, color 0.3s, border-color 0.3s, box-shadow 0.2s;
    }

        .form-control:focus,
        .form-select:focus {
            background-color: var(--bg-color);
            border-color: var(--btn-primary);
            box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.25);
            color: var(--text-color);
        }

    .form-label {
        font-weight: 500;
        margin-bottom: 0.35rem;
    }

    .btn-primary, .btn-outline-primary, .btn-outline-success, .btn-outline-danger {
        border-radius: 0.75rem;
        padding: 0.65rem;
        font-weight: 600;
        transition: all 0.2s;
    }

    .btn-primary {
        background-color: var(--btn-primary);
        border: none;
        color: #fff;
    }

        .btn-primary:hover {
            background-color: var(--btn-primary-hover);
        }

    .back-link {
        color: var(--text-muted);
        text-decoration: none;
        font-size: 0.95rem;
        transition: color 0.2s;
    }

        .back-link:hover {
            color: var(--btn-primary);
        }

    /* центрируем кнопку назад */
    .back-container {
        display: flex;
        justify-content: center;
        margin-top: 1rem;
    }

    /* ограничиваем ширину кнопки Сохранить */
    .btn-save-wrapper {
        display: flex;
        justify-content: center;
        margin-top: 1.5rem;
    }

        .btn-save-wrapper .btn {
            width: 180px;
        }

    .order-dropdown-menu {
        background-color: var(--bg-color);
        border: 1px solid var(--border-color);
        border-radius: 0.5rem;
        overflow: hidden;
    }

        .order-dropdown-menu .dropdown-item {
            color: var(--text-color);
            transition: background-color 0.2s, color 0.2s;
        }

            .order-dropdown-menu .dropdown-item:hover,
            .order-dropdown-menu .dropdown-item:focus {
                background-color: var(--btn-primary);
                color: #fff;
            }

            .order-dropdown-menu .dropdown-item.active {
                background-color: var(--btn-primary);
                color: #fff;
            }

    /* Тёмная тема */
    body.dark-mode .order-dropdown {
        background-color: #161b22;
        color: var(--text-color);
        border-color: var(--border-color);
    }

    body.dark-mode .order-dropdown-menu {
        background-color: #161b22;
        border-color: var(--border-color);
    }

    .order-dropdown {
        color: var(--text-color) !important;
        border-radius: 0.75rem;
        padding: 0.65rem 1rem;
        background-color: var(--bg-color) !important;
        border: 1px solid var(--border-color) !important;
        text-align: left;
        transition: color 0.2s;
    }

        /* при наведении только текст синий */
        .order-dropdown:hover {
            color: var(--btn-primary) !important;
            border-color: var(--btn-primary);
        }

        /* убираем подсветку при фокусе/клике */
        .order-dropdown:focus,
        .order-dropdown:active,
        .order-dropdown.show {
            background-color: var(--bg-color) !important;
            color: var(--text-color) !important;
            border-color: var(--border-color) !important;
            box-shadow: none !important;
        }
</style>

<div class="container mt-3 mb-5 d-flex justify-content-center">
    <div class="col-md-6 col-lg-9">
        <h3>@Localizer["Subtitle"]</h3>

        <form asp-action="Edit" method="post" class="row g-3 needs-validation" novalidate>

            <input type="hidden" asp-for="Id" />

            <div class="col-md-4">
                <label asp-for="DeviceType" class="form-label">@Localizer["TypeLabel"]</label>
                <input asp-for="DeviceType" class="form-control" />
                <span asp-validation-for="DeviceType" class="text-danger small"></span>
            </div>

            <div class="col-md-4">
                <label asp-for="Brand" class="form-label">@Localizer["BrandLabel"]</label>
                <input asp-for="Brand" class="form-control" />
                <span asp-validation-for="Brand" class="text-danger small"></span>
            </div>

            <div class="col-md-4">
                <label asp-for="Model" class="form-label">@Localizer["ModelLabel"]</label>
                <input asp-for="Model" class="form-control" />
                <span asp-validation-for="Model" class="text-danger small"></span>
            </div>

            <div class="col-12">
                <label asp-for="Issue" class="form-label">@Localizer["IssueLabel"]</label>
                <input asp-for="Issue" class="form-control" />
                <span asp-validation-for="Issue" class="text-danger small"></span>
            </div>

            <div class="col-md-6">
                <label asp-for="Counterparty" class="form-label">@Localizer["CounterpartyLabel"]</label>
                <input asp-for="Counterparty" class="form-control" />
                <span asp-validation-for="Counterparty" class="text-danger small"></span>
            </div>

            <div class="col-md-3">
                <label asp-for="Amount" class="form-label">@Localizer["AmountLabel"]</label>
                <input asp-for="Amount" class="form-control" />
                <span asp-validation-for="Amount" class="text-danger small"></span>
            </div>

            <div class="col-md-3">
                <label class="form-label">@Localizer["StatusLabel"]</label>
                <div class="dropdown w-100">
                    <button class="btn btn-outline-secondary dropdown-toggle order-dropdown w-100"
                            type="button"
                            id="statusDropdown"
                            data-bs-toggle="dropdown"
                            aria-expanded="false">
                        @LocalizationOrderStatusHelper.GetOrderStatusTranslation(Model.Status)
                    </button>
                    <ul class="dropdown-menu order-dropdown-menu w-100" aria-labelledby="statusDropdown">
                        @foreach (var s in Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>())
                        {
                            <li>
                                <a class="dropdown-item @(Model.Status == s ? "active" : "")"
                                   href="#"
                                   data-value="@s"
                                   data-translated="@LocalizationOrderStatusHelper.GetOrderStatusTranslation(s)">
                                    @LocalizationOrderStatusHelper.GetOrderStatusTranslation(s)
                                </a>
                            </li>
                        }
                    </ul>
                </div>
                <input type="hidden" id="SelectedStatus" name="Status" value="@Model.Status" />
            </div>


            <div class="col-md-4">
                <label asp-for="CreatedAt" class="form-label">@Localizer["DateLabel"]</label>
                <input asp-for="CreatedAt" class="form-control" type="datetime-local" />
                <span asp-validation-for="CreatedAt" class="text-danger small"></span>
            </div>

            <div class="btn-save-wrapper mb-2">
                <button class="btn btn-outline-primary" type="submit" style="width: 14rem;">@Localizer["SaveButton"]</button>
            </div>

            <div class="back-container">
                <a asp-action="Index" class="text-decoration-none text-muted">@Localizer["BackButton"]</a>
            </div>

        </form>
    </div>
</div>