@model IEnumerable<ServiceCRM.Models.Order>
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer
@inject ServiceCRM.Services.LocalizationOrderStatusHelper LocalizationOrderStatusHelper

@using ServiceCRM.Models

@{
    ViewData["Title"] = @Localizer["Title"];
    var currentSearch = ViewData["CurrentSearch"] as string ?? "";
    var currentStatus = ViewData["CurrentStatus"] as string ?? "";
    var currentSort = ViewData["CurrentSort"] as string ?? "";
}

<div class="d-flex flex-column flex-md-row align-items-md-center justify-content-between mb-4">
    <h2 class="mb-3 mb-md-0">@Localizer["Subtitle"]</h2>
    <a class="btn btn-outline-primary btn-lg" asp-action="Create">@Localizer["CreateOrderButton"]</a>
</div>

<form method="get" class="row g-3 mb-4">
    <div class="col-md-4">
        <input name="search" value="@currentSearch" class="form-control"
               placeholder="@Localizer["SearchInput"]" />
    </div>
    <div class="col-md-3">
        <div class="dropdown w-100">
            <a class="nav-link dropdown-toggle service-dropdown w-100 text-start" 
                href="#" 
                id="statusDropdown" 
                role="button" 
                data-bs-toggle="dropdown" 
                aria-expanded="false">
                    @(string.IsNullOrEmpty(currentStatus)
                                    ? Localizer["StatusSelect"]
                                    : LocalizationOrderStatusHelper.GetOrderStatusTranslation(
                                    Enum.Parse<OrderStatus>(currentStatus)))
            </a>
            <ul class="dropdown-menu order-dropdown-menu w-100" aria-labelledby="statusDropdown">
                <li>
                    <a class="dropdown-item" href="?status=&search=@currentSearch&sort=@currentSort">
                        @Localizer["StatusSelect"]
                    </a>
                </li>
                @foreach (var s in Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>())
                {
                    <li>
                        <a class="dropdown-item @(currentStatus == s.ToString() ? "active" : "")"
                           href="?status=@s&search=@currentSearch&sort=@currentSort">
                            @LocalizationOrderStatusHelper.GetOrderStatusTranslation(s)
                        </a>
                    </li>
                }
            </ul>
        </div>
    </div>
    <div class="col-md-3">
        <div class="dropdown w-100">
            <a class="nav-link dropdown-toggle service-dropdown w-100 text-start"
               href="#"
               id="sortDropdown"
               role="button"
               data-bs-toggle="dropdown"
               aria-expanded="false">
                @{
                    var sortLabel = currentSort switch
                    {
                        "created_asc" => Localizer["SortSelectDataUp"],
                        "sum_desc" => Localizer["SortSelectAmountDown"],
                        "sum_asc" => Localizer["SortSelectAmountUp"],
                        "status_desc" => Localizer["SortSelectStatusDown"],
                        "status_asc" => Localizer["SortSelectStatusUp"],
                        _ => Localizer["SortSelectDataDown"]
                    };
                }
                @sortLabel
            </a>
            <ul class="dropdown-menu order-dropdown-menu w-100" aria-labelledby="sortDropdown">
                <li>
                    <a class="dropdown-item @(string.IsNullOrEmpty(currentSort) ? "active" : "")"
                       href="?sort=&status=@currentStatus&search=@currentSearch">
                        @Localizer["SortSelectDataDown"]
                    </a>
                </li>
                <li>
                    <a class="dropdown-item @(currentSort == "created_asc" ? "active" : "")"
                       href="?sort=created_asc&status=@currentStatus&search=@currentSearch">
                        @Localizer["SortSelectDataUp"]
                    </a>
                </li>
                <li>
                    <a class="dropdown-item @(currentSort == "sum_desc" ? "active" : "")"
                       href="?sort=sum_desc&status=@currentStatus&search=@currentSearch">
                        @Localizer["SortSelectAmountDown"]
                    </a>
                </li>
                <li>
                    <a class="dropdown-item @(currentSort == "sum_asc" ? "active" : "")"
                       href="?sort=sum_asc&status=@currentStatus&search=@currentSearch">
                        @Localizer["SortSelectAmountUp"]
                    </a>
                </li>
                <li>
                    <a class="dropdown-item @(currentSort == "status_desc" ? "active" : "")"
                       href="?sort=status_desc&status=@currentStatus&search=@currentSearch">
                        @Localizer["SortSelectStatusDown"]
                    </a>
                </li>
                <li>
                    <a class="dropdown-item @(currentSort == "status_asc" ? "active" : "")"
                       href="?sort=status_asc&status=@currentStatus&search=@currentSearch">
                        @Localizer["SortSelectStatusUp"]
                    </a>
                </li>
            </ul>
        </div>
    </div>
    <div class="col-md-2 d-grid">
        <button class="btn btn-outline-success btn-lg">@Localizer["ApplyButton"]</button>
    </div>
</form>

<div class="table-responsive shadow-sm rounded-3 mb-5">
    <table class="table table-hover align-middle mb-0">
        <thead>
            <tr>
                <th>@Localizer["ColumnOrderNumberTable"]</th>
                <th>@Localizer["ColumnDateTable"]</th>
                <th>@Localizer["ColumnStatusTable"]</th>
                <th>@Localizer["ColumnTypeTable"]</th>
                <th>@Localizer["ColumnBrandTable"]</th>
                <th>@Localizer["ColumnModelTable"]</th>
                <th>@Localizer["ColumnIssueTable"]</th>
                <th>@Localizer["ColumnCounterpartyTable"]</th>
                <th class="text-end">@Localizer["ColumnAmountTable"]</th>
                <th class="text-end">@Localizer["ColumnActionsTable"]</th>
            </tr>
        </thead>
        <tbody id="ordersBody">
            @await Html.PartialAsync("_OrdersRows", Model)
        </tbody>
    </table>
</div>

<style>
    :root {
        --bg-color: #f6f8fa;
        --text-color: #1f2328;
        --text-muted: #656d76;
        --border-color: #d0d7de;
        --btn-primary: #3b82f6;
        --btn-primary-hover: #2563eb;
        --btn-success: #22c55e;
        --btn-success-hover: #16a34a;
        --btn-danger: #ef4444;
        --btn-danger-hover: #dc2626;
        --table-hover-bg: rgba(59,130,246,0.1);
        --table-tr-border-color: #d0d7de;
    }

    body.dark-mode {
        --bg-color: #0d1117;
        --text-color: #c9d1d9;
        --text-muted: #8b949e;
        --border-color: #30363d;
        --btn-primary: #3b82f6;
        --btn-primary-hover: #1d4ed8;
        --btn-success: #3fb950;
        --btn-success-hover: #238636;
        --btn-danger: #f85149;
        --btn-danger-hover: #cf222e;
        --table-hover-bg: rgba(59,130,246,0.2);
        --table-tr-border-color: #30363d;
    }

    body {
        background-color: var(--bg-color);
        color: var(--text-color);
        font-family: 'Inter', sans-serif;
        transition: background-color 0.3s, color 0.3s;
    }

    .form-control, .form-select {
        border-radius: 0.75rem;
        padding: 0.65rem 1rem;
        background-color: var(--bg-color);
        border: 1px solid var(--border-color);
        color: var(--text-color);
        transition: background-color 0.3s, color 0.3s, border-color 0.3s;
    }

    body.dark-mode .form-control:focus,
    body.dark-mode .form-select:focus {
        background-color: #161b22;
        color: #c9d1d9;
        border-color: var(--btn-primary);
        box-shadow: 0 0 0 0.2rem rgba(59,130,246,0.25);
    }

    body:not(.dark-mode) .form-control:focus,
    body:not(.dark-mode) .form-select:focus {
        background-color: #ffffff;
        color: var(--text-color);
        border-color: var(--btn-primary);
        box-shadow: 0 0 0 0.2rem rgba(59,130,246,0.25);
    }

    .btn-primary, .btn-outline-primary, .btn-outline-success {
        border-radius: 0.75rem;
        padding: 0.65rem;
        font-weight: 600;
        font-size: 0.95rem;
        transition: all 0.2s;
    }

    .btn-primary {
        background-color: var(--btn-primary);
        border: none;
        color: #fff;
    }

        .btn-primary:hover {
            background-color: var(--btn-primary-hover);
        }

    .btn-outline-primary {
        color: var(--btn-primary);
        border-color: var(--btn-primary);
    }

        .btn-outline-primary:hover {
            background-color: var(--btn-primary);
            color: #fff;
        }

    .btn-outline-success {
        color: var(--btn-success);
        border-color: var(--btn-success);
    }

        .btn-outline-success:hover {
            background-color: var(--btn-success);
            color: #fff;
        }

    .table-responsive {
        border: 1px solid var(--border-color);
        background-color: var(--bg-color);
        transition: background-color 0.3s, border-color 0.3s;
    }

    .table {
        border-collapse: collapse;
    }

    .table tr {
        border-style: none;
    }

        .table th, .table td {
            vertical-align: middle;
            font-size: 0.95rem;
            font-weight: 400;
            color: var(--text-color);
            border-top: 1px solid var(--border-color);
        }

        .table thead th {
            background-color: var(--border-color);
            color: var(--text-muted);
            border-bottom: none;
        }

    .table-hover tbody tr:hover {
        background-color: var(--table-hover-bg);
    }

    .action-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        height: 2rem; /* фиксированная высота */
        min-width: 2rem; /* чтобы квадратные кнопки */
        padding: 0; /* убираем внутренние паддинги Bootstrap */
        font-size: 0.9rem;
        line-height: 1;
        border-radius: 0.65rem;
        transition: all 0.2s;
    }

    /* Зеленая кнопка при наведении */
    .btn-outline-success.action-btn:hover {
        background-color: var(--btn-success);
        color: #fff;
        border-color: var(--btn-success);
    }

    /* Красная кнопка при наведении */
    .btn-outline-danger.action-btn:hover {
        background-color: var(--btn-danger);
        color: #fff;
        border-color: var(--btn-danger);
    }

    .action-btn i {
        font-size: 1rem; /* иконка под текст */
    }

    .dropdown-toggle {
        border-radius: 0.75rem;
        padding: 0.65rem 1rem;
        font-size: 0.95rem;
        color: var(--text-color);
        background-color: var(--bg-color);
        border: 1px solid var(--border-color);
        text-align: left;
        transition: background-color 0.3s, color 0.3s, border-color 0.3s;
    }

        .dropdown-toggle:focus {
            box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.25);
            background-color: antiquewhite;
            border-color: var(--btn-primary);
        }

    .dropdown-menu {
        border-radius: 0.75rem;
        min-width: 100%;
        background-color: var(--bg-color);
        border: 1px solid var(--border-color);
    }

    .dropdown-item {
        color: var(--text-color);
        transition: background-color 0.2s, color 0.2s;
    }

        .dropdown-item:hover,
        .dropdown-item:focus {
            background-color: var(--btn-primary);
            color: #fff;
        }

    body.dark-mode .dropdown-toggle {
        background-color: #161b22;
        color: #c9d1d9;
        border-color: #30363d;
    }

    body.dark-mode .dropdown-menu {
        background-color: #161b22;
        border-color: #30363d;
    }

    body.dark-mode .dropdown-item {
        color: #c9d1d9;
    }

        body.dark-mode .dropdown-item:hover,
        body.dark-mode .dropdown-item:focus {
            background-color: var(--btn-primary);
            color: #fff;
        }
</style>

<script>
    let page = 1;
    let loading = false;
    const totalCount = @ViewData["TotalCount"];
    const pageSize = 20;

    window.addEventListener('scroll', async () => {
        if (loading) return;

        if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 200) {
            const loadedRows = document.querySelectorAll('#ordersBody tr').length;
            if (loadedRows >= totalCount) return;

            loading = true;
            page++;

            const params = new URLSearchParams(window.location.search);
            params.set("page", page);

            const response = await fetch(`/Orders/LoadMore?${params.toString()}`);
            const html = await response.text();

            document.getElementById('ordersBody').insertAdjacentHTML('beforeend', html);

            loading = false;
        }
    });
</script>
